/* eslint-disable @typescript-eslint/no-unused-vars */
import { Inject, Injectable, Logger } from '@nestjs/common';
import { Ctx, Start, Update, On, Command, InjectBot } from 'nestjs-telegraf';

import { Context, Markup, Telegraf } from 'telegraf';
import { RegisteringUserContext } from './types';
import { AppConfigService } from '@modules/config';
import { UserEntity, UserService } from '@modules/user';

@Update()
@Injectable()
export class TelegramBotUpdateService {
  private readonly _logger = new Logger(TelegramBotUpdateService.name);

  constructor(
    @Inject() private readonly _config: AppConfigService,
    private readonly _userService: UserService,
    @InjectBot() private readonly bot: Telegraf
  ) {}

  @Start()
  async handleStart(@Ctx() ctx: RegisteringUserContext) {
    this._logger.log('handleStart');
    if (
      await this._checkAndHandleIfChatMember(ctx, String(this._config.groupId))
    ) {
      return;
    }

    await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –ò–¢–ú–û, –æ—Ç–≤–µ—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.',
      Markup.keyboard([['–ü—Ä–∏—Å—Ç—É–ø–∏–º!']])
        .resize()
        .oneTime(),
    );
    ctx.session = { step: 'start-approve' };
  }

  @Command('id')
  async handleChannelId(@Ctx() ctx: RegisteringUserContext) {
    this._logger.log('handleChannelId');
    await ctx.reply(
      `Id —á–∞—Ç–∞: \`${ctx.chat.id}\`\nId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \`${ctx.from.id}\``, 
      { parse_mode: 'MarkdownV2' }
    );
    return;  
  }

  @Command('verify')
  async handleVerifyUser(@Ctx() ctx) {
    // check chat from
    if (ctx.chat.id !== this._config.adminsGroupId) {
      // not allowed
      await ctx.reply(
        `–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`, 
        { parse_mode: 'MarkdownV2' }
      );
      return;
    }
    
    // parse username
    const msgText: string = ctx.update.message.text
    const splittedMsgText = msgText.split(' ')
    
    // if no username -> send reply "need username"
    if (splittedMsgText.length !== 2) {
      await ctx.reply(`–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ "@"). –ù–∞–ø—Ä–∏–º–µ—Ä /verify user_name`); 
      return;
    }

    // check if user not in db -> send reply user should apply for participance
    const username = splittedMsgText[1];

    await this._verifyUser(ctx, username, true);
  }

  @Command('createLink')
  async handleCreateLink(@Ctx() ctx: RegisteringUserContext) {}

  @On('text')
  async handleText(@Ctx() ctx: RegisteringUserContext) {
    this._logger.log('handleText');
    if (
      await this._isMessageFromTargetChat(ctx, String(this._config.groupId)) ||
      await this._isMessageFromTargetChat(ctx, String(this._config.adminsGroupId))
    ) {
      console.log(`Message from target chat`);
      return;
    }

    if (await this._checkAndHandleIfChatMember(ctx, String(this._config.groupId))) { 
      return; 
    }

    if ('text' in ctx.message) {
      const text = ctx.message.text;

      switch (ctx.session.step) {
        case 'start-approve':
          await ctx.reply('–¢–≤–æ–µ –∏–º—è:');
          ctx.session.step = 'name';
          break;

        case 'name':
          ctx.session.name = text;
          await ctx.reply('–¢–≤–æ—è —Ñ–∞–º–∏–ª–∏—è:');
          ctx.session.step = 'surname';
          break;

        case 'surname':
          ctx.session.surname = text;
          await ctx.reply(
            '–¢–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ:',
          );
          ctx.session.step = 'fatherName';
          break;

        case 'fatherName':
          ctx.session.fatherName = text;
          await ctx.reply(
            '–¢–≤–æ—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:',
          );
          ctx.session.step = 'email';
          break;

        case 'email':
          ctx.session.email = text;
          await ctx.reply('–ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):');
          ctx.session.step = 'uniFinishedYear';
          break;

        case 'uniFinishedYear':
          ctx.session.uniFinishedYear = Number(text);
          await ctx.reply('–¢–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç (–∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞):');
          ctx.session.step = 'faculty';
          break;

        case 'faculty':
          ctx.session.faculty = text;
          await ctx.reply('–ö–æ–º–ø–∞–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å:');
          ctx.session.step = 'workCompany';
          break;

        case 'workCompany':
          ctx.session.workCompany = text;
          await ctx.reply('–ü–æ–∑–∏—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å:');
          ctx.session.step = 'workPosition';
          break;

        case 'workPosition':
          ctx.session.workPosition = text;
          await ctx.reply('–¢–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:');
          ctx.session.step = 'professional–°ompetencies';
          break;

        case 'professional–°ompetencies':
          ctx.session.professional–°ompetencies = text;
          await ctx.reply('–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤(-–∞) –∏—Å–ø–æ–ª–Ω—è—Ç—å –≤ –∫–ª—É–±–µ:');
          ctx.session.step = 'clubActivities';
          break;

        case 'clubActivities':
          ctx.session.clubActivities = text;
          await ctx.reply('–ì–æ—Ç–æ–≤(-–∞) —É–¥–µ–ª—è—Ç—å —á–∞—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—É–±–∞? (–¥–∞ / –Ω–µ—Ç)');
          ctx.session.step = 'readyToHelpClub';
          break;

        case 'readyToHelpClub':
          ctx.session.readyToHelpClub = text.toLowerCase() === '–¥–∞' ? true : false;
          await ctx.reply('–í–Ω–µ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é/—Å–≤–æ–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä? (–¥–∞ / –Ω–µ—Ç)\n\n–†–µ–µ—Å—Ç—Ä - —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥/–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–Ω–∏ –≥–æ—Ç–æ–≤—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–º –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞–º–∏ (–≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞/–ø–∞—Ä—Ç–Ω–µ—Ä–∞)');
          ctx.session.step = 'addCompanyToCatalogue';
          break;

        case 'addCompanyToCatalogue':
          ctx.session.addCompanyToCatalogue = text.toLowerCase() === '–¥–∞' ? true : false;
          await ctx.reply('–û—Ç–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ, –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤ —Ä–µ–µ—Å—Ç—Ä, –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª—É–±–∞? (–¥–∞ / –Ω–µ—Ç)');
          ctx.session.step = 'openCatalogueData';
          break;

        case 'openCatalogueData':
          ctx.session.openCatalogueData = text.toLowerCase() === '–¥–∞' ? true : false;
          await ctx.reply('–û–ø–∏—à–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –æ–∂–∏–¥–∞–µ—à—å –æ—Ç –∫–ª—É–±–∞:');
          ctx.session.step = 'valueFromClub';
          break;

        case 'valueFromClub':
          ctx.session.valueFromClub = text;
          /** Add user */
          const tgUser = ctx.from;
          const user: UserEntity = {
            telegramId: String(tgUser.id),
            firstName: ctx.session.name,
            lastName: ctx.session.surname,
            username: tgUser.username,
            fatherName: ctx.session.fatherName,
            email: ctx.session.email,
            uniFinishedYear: ctx.session.uniFinishedYear,
            faculty: ctx.session.faculty,
            workCompany: ctx.session.workCompany,
            workPosition: ctx.session.workPosition,
            professional–°ompetencies: ctx.session.professional–°ompetencies,
            clubActivities: ctx.session.clubActivities,
            readyToHelpClub: ctx.session.readyToHelpClub,
            addCompanyToCatalogue: ctx.session.addCompanyToCatalogue,
            openCatalogueData: ctx.session.openCatalogueData,
            valueFromClub: ctx.session.valueFromClub,
            isVerified: 0,
          };
          await this._addUser(user);

          // send message to admins group
          const keyboard = Markup.inlineKeyboard([
            Markup.button.callback('‚úÖ –¥–∞', `userIsAlumni:${tgUser.username}`),
            Markup.button.callback('‚ùå –Ω–µ—Ç', `userNotAlumni:${tgUser.username}`)
          ])

          await this.bot.telegram.sendMessage(
            this._config.adminsGroupId, 
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${tgUser.username} –ø—Ä–∏—Å–ª–∞–ª –∞–Ω–∫–µ—Ç—É:\n ${this._generateUserInfoMsg(user)}. \n\n–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?`,
            { reply_markup: keyboard.reply_markup }
          );

          /** Reply  */
          await ctx.reply(
            `–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–± –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –ò–¢–ú–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç, —á—Ç–æ –≤—ã —É—á–∏–ª–∏—Å—å –≤ –ò–¢–ú–û, —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É.`,
          );



          ctx.session.step = 'verification';
          break;

        default:
          await ctx.reply('–ß–µ–ª–æ–≤–µ–∫, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é ü•≤');
      }
    }
  }

  @On('callback_query')
  async handleCallbackQuery(@Ctx() ctx) {
    this._logger.log('handleCallbackQuery');
    

    const data = ctx.callbackQuery?.data;
    this._logger.log(`callback data: ${data}`);
    if (!data) return;

    const splittedData = data.split(':');

    /**
     * User verified
     */
    if (data.startsWith('userIsAlumni')) {
      if (splittedData.length !== 2) {
        this._logger.error(
          `Invalid callback data: ${data}`,
        );
        return;
      }
      const username = splittedData[1];
      await this._verifyUser(ctx, username, true);
      return;
    }

    /**
     * User not verified
     */
    if (data.startsWith('userNotAlumni')) {
      if (splittedData.length !== 2) {
        this._logger.error(
          `Invalid callback data: ${data}`,
        );
        return;
      }
      const username = splittedData[1];
      
      console.log(`Not verify user ${username}`)
      await this._verifyUser(ctx, username, false);
      return;
    }
  }

  private async _generateInviteLink(
    @Ctx() ctx: RegisteringUserContext,
    chatId: number,
    expireDate?: number,
  ): Promise<string> {
    try {
      console.log(`Generating link`);
      const inviteLink = await ctx.telegram.createChatInviteLink(chatId, {
        expire_date: expireDate,
        // expire_date: Math.floor(Date.now() / 1000) + 1800, // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –º–∏–Ω—É—Ç
        member_limit: 1, // –õ–∏–º–∏—Ç: 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      });
      return inviteLink.invite_link;
    } catch (error) {
      this._logger.error(error.message);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async _setUserVerified(user: UserEntity, isVerified: boolean) {
    user.isVerified = isVerified ? 1 : -1
    await this._userService.updateUser(user)
  }

  private async _addUser(user: UserEntity): Promise<void> {
    try {
      await this._userService.createUser(user);
    } catch (error) {
      console.error(`Failed to add user @${user.username}:`, error.message);
    }
  }

  private async _isUserChatMember(
    ctx: Context,
    chatId: string,
  ): Promise<boolean> {
    try {
      const chatMember = await ctx.telegram.getChatMember(chatId, ctx.from.id);

      return (
        chatMember.status === 'member' ||
        chatMember.status === 'administrator' ||
        chatMember.status === 'creator'
      );

    } catch (err) {
      console.log(`Seems like bot not in chat ${chatId}`)
      return
    }
  }

  private async _checkAndHandleIfChatMember(
    ctx: Context,
    chatId: string,
  ): Promise<boolean> {
    const isChatMember = await this._isUserChatMember(ctx, chatId);
    if (isChatMember) {
      await ctx.reply(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—à–µ–ª —Ç–µ–±—è, —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —á–∞—Ç–µ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –ò–¢–ú–û!',
        Markup.keyboard([[]]),
      );
    }
    return isChatMember;
  }

  private async _isMessageFromTargetChat(ctx: Context, chatId: string) {
    return String(ctx.chat.id) === chatId;
  }

  private _generateUserInfoMsg(user: UserEntity): string {
    return `` + 
      `–§–ò–û: ${user.lastName} ${user.firstName} ${user.fatherName}\n` +
      `email: ${user.email}\n–û–∫–æ–Ω—á–∏–ª —Ñ–∞–∫—É–ª—å—Ç–µ—Ç ${user.faculty} –≤ ${user.uniFinishedYear} –≥–æ–¥—É\n` +
      `–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –¥–µ—è—Ç-—Ç–∏ –∫–ª—É–±–∞: ${user.readyToHelpClub}${user.readyToHelpClub ? `–†–æ–ª—å –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: ` + user.clubActivities : ''}\n` +
      `–¶–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –∫–ª—É–±–∞: ${user.valueFromClub}`
  }

  private async _verifyUser(@Ctx() ctx, username: string, isVerified: boolean) {
    const users = await this._userService.findUsers({ username });

    if (users.length === 0) {
      await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ª–∏–±–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞`); 
      return;
    }

    if (users.length > 1) {
      await ctx.reply(`–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –¢–∞–∫–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ë–î`); 
      return;
    }

    const user = users[0]
    if (user.isVerified === 1 || user.isVerified === -1) {
      await ctx.reply(`–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${user.isVerified === 1 ? '–æ–¥–æ–±—Ä–µ–Ω–æ' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'}`);  
      return
    }

    if (isVerified) {
      // send reply "user verified. Invite link:".
      const inviteLink = await this._generateInviteLink(ctx, this._config.groupId)
      if (typeof inviteLink === 'undefined') {
        await ctx.reply(`–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –æ–±–ª–∞–¥–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Å—ã–ª–∫–µ`)
        return;
      }

      // reply in chat
      await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É (${inviteLink}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`);
      
      // send invite link to user
      await this.bot.telegram.sendMessage(user.telegramId, `–í–∞—à–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –ò–¢–ú–û –±—ã–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: ${inviteLink}`);
    } else {
      // reply in chat
      await ctx.reply(`–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} –æ—Ç–∫–ª–æ–Ω–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`);

      // send invite link to user
      await this.bot.telegram.sendMessage(user.telegramId, `–í–∞—à–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –ò–¢–ú–û –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ`);
    }

    // verify user
    await this._setUserVerified(user, isVerified);
  }
}
