/* eslint-disable @typescript-eslint/no-unused-vars */
import { Inject, Injectable, Logger } from '@nestjs/common';
import { Ctx, Start, Update, On } from 'nestjs-telegraf';

import { Markup } from 'telegraf';
import { RegisteringUserContext } from './types';
import { AppConfigService } from '@modules/config';

@Update()
@Injectable()
export class TelegramBotUpdateService {
  private readonly _logger = new Logger(TelegramBotUpdateService.name);

  constructor(@Inject() private readonly _config: AppConfigService) {}

  @Start()
  async _handleStart(@Ctx() ctx: RegisteringUserContext) {
    await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –ò–¢–ú–û, –æ—Ç–≤–µ—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.',
      Markup.keyboard([['–ü—Ä–∏—Å—Ç—É–ø–∏–º!']]) // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        .resize() // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        .oneTime(), // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    );
    ctx.session = { step: 'start-approve' };
  }

  @On('text')
  async handleText(@Ctx() ctx: RegisteringUserContext) {
    this._logger.log(`Get ctx`);

    if ('text' in ctx.message) {
      const text = ctx.message.text;

      switch (ctx.session.step) {
        case 'start-approve':
          await ctx.reply('–¢–≤–æ–µ –∏–º—è?');
          ctx.session.step = 'name';
          break;

        case 'name':
          ctx.session.name = text;
          await ctx.reply('–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?');
          ctx.session.step = 'surname';
          break;

        case 'surname':
          ctx.session.surname = text;
          await ctx.reply('–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ:');
          ctx.session.step = 'bio';
          break;

        case 'bio':
          ctx.session.bio = text;
          await ctx.reply('–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç?');
          ctx.session.step = 'goal';
          break;

        case 'goal':
          ctx.session.goal = text;
          await ctx.reply(
            `–°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç: ${await this._generateInviteLink(ctx, this._config.groupId)}. –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –µ–π –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑`,
          );
          ctx.session.step = 'link-generated';
          break;

        case 'link-generated':
          await ctx.reply(
            `–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç: ${await this._generateInviteLink(ctx, this._config.groupId)}. –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –µ–π –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑`,
          );
          break;

        default:
          await ctx.reply('–ß–µ–ª–æ–≤–µ–∫, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é ü•≤');
      }
    }
  }

  private async _generateInviteLink(
    @Ctx() ctx: RegisteringUserContext,
    chatId: number,
  ): Promise<string> {
    try {
      console.log(`Generating link`);
      const inviteLink = await ctx.telegram.createChatInviteLink(chatId, {
        expire_date: Math.floor(Date.now() / 1000) + 1800, // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –º–∏–Ω—É—Ç
        member_limit: 1, // –õ–∏–º–∏—Ç: 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      });
      return inviteLink.invite_link;
    } catch (error) {
      this._logger.error(error.message);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}
