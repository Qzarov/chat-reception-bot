/* eslint-disable @typescript-eslint/no-unused-vars */
import { Inject, Injectable, Logger } from '@nestjs/common';
import { Ctx, Start, Update, On, Command, InjectBot } from 'nestjs-telegraf';

import { Context, Markup, Telegraf } from 'telegraf';
import { RegisteringUserContext } from './types';
import { AppConfigService } from '@modules/config';
import { UserEntity, UserService } from '@modules/user';

@Update()
@Injectable()
export class TelegramBotUpdateService {
  private readonly _logger = new Logger(TelegramBotUpdateService.name);

  constructor(
    @Inject() private readonly _config: AppConfigService,
    private readonly _userService: UserService,
    @InjectBot() private readonly bot: Telegraf
  ) {}

  @Start()
  async handleStart(@Ctx() ctx: RegisteringUserContext) {
    this._logger.log('handleStart');
    const dbUser = await this._userService.findUserById(ctx.from.id);
    if (
      await this._checkAndHandleIfChatMember(ctx, String(this._config.groupId))
    ) {
      return;
    }

    await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –ò–¢–ú–û, –æ—Ç–≤–µ—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.',
      Markup.keyboard([['–ü—Ä–∏—Å—Ç—É–ø–∏–º!']])
        .resize()
        .oneTime(),
    );
    ctx.session = { step: 'start-approve' };
  }

  @Command('id')
  async handleChannelId(@Ctx() ctx: RegisteringUserContext) {
    this._logger.log('handleChannelId');
    await ctx.reply(
      `Id —á–∞—Ç–∞: \`${ctx.chat.id}\`\nId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \`${ctx.from.id}\``, 
      { parse_mode: 'MarkdownV2' }
    );
    return;  
  }

  @Command('verify')
  async handleVerifyUser(@Ctx() ctx) {
    // check chat from
    if (ctx.chat.id !== this._config.adminsGroupId) {
      // not allowed
      await ctx.reply(
        `–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`, 
        { parse_mode: 'MarkdownV2' }
      );
      return;
    }
    
    // parse username
    const msgText: string = ctx.update.message.text
    const splittedMsgText = msgText.split(' ')
    
    // if no username -> send reply "need username"
    if (splittedMsgText.length !== 2) {
      await ctx.reply(`–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ "@"). –ù–∞–ø—Ä–∏–º–µ—Ä /verify user_name`); 
      return;
    }

    // check if user not in db -> send reply user should apply for participance
    const username = splittedMsgText[1];
    const users = await this._userService.findUsers({ username });

    if (users.length === 0) {
      await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ª–∏–±–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞`); 
      return;
    }

    if (users.length > 1) {
      await ctx.reply(`–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –¢–∞–∫–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ë–î`); 
      return;
    }

    const user = users[0]
    if (user.isVerified) {
      await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω`);  
      return
    }

    // send reply "user verified. Invite link:".
    const inviteLink = await this._generateInviteLink(ctx, this._config.groupId)
    if (typeof inviteLink === 'undefined') {
      await ctx.reply(`–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –æ–±–ª–∞–¥–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Å—ã–ª–∫–µ`)
      return;
    }

    // verify user
    await this._verifyUser(user);

    // reply in chat
    await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É (${inviteLink}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`);
    
    // send invite link to user
    await this.bot.telegram.sendMessage(user.telegramId, `–í–∞—à–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –ò–¢–ú–û –±—ã–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: ${inviteLink}`);
  }

  @Command('createLink')
  async handleCreateLink(@Ctx() ctx: RegisteringUserContext) {}

  @On('text')
  async handleText(@Ctx() ctx: RegisteringUserContext) {
    this._logger.log('handleText');
    if (
      await this._checkAndHandleIfChatMember(ctx, String(this._config.groupId))
    ) {
      return;
    }

    if ('text' in ctx.message) {
      const text = ctx.message.text;

      switch (ctx.session.step) {
        case 'start-approve':
          await ctx.reply('–¢–≤–æ–µ –∏–º—è?');
          ctx.session.step = 'name';
          break;

        case 'name':
          ctx.session.name = text;
          await ctx.reply('–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?');
          ctx.session.step = 'surname';
          break;

        case 'surname':
          ctx.session.surname = text;
          await ctx.reply(
            '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:',
          );
          ctx.session.step = 'about';
          break;

        case 'about':
          ctx.session.about = text;
          await ctx.reply('–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å—Ñ–µ—Ä–µ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:');
          ctx.session.step = 'areaOfInterest';
          break;

        case 'areaOfInterest':
          ctx.session.goal = text;
          /** Add user */
          const tgUser = ctx.from;
          const user: UserEntity = {
            telegramId: String(tgUser.id),
            firstName: tgUser.first_name,
            lastName: tgUser.last_name,
            username: tgUser.username,
            about: ctx.session.about,
            isVerified: false,
          };
          await this._addUser(user);
          /** Reply  */
          await ctx.reply(
            `–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–± –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –ò–¢–ú–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç, —á—Ç–æ –≤—ã —É—á–∏–ª–∏—Å—å –≤ –ò–¢–ú–û, —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É.`,
          );

          // await ctx.reply(
          //   `–°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç: ${await this._generateInviteLink(ctx, this._config.groupId)}. –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –µ–π –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.`,
          // );
          ctx.session.step = 'verification';
          
          // ctx.session.step = 'link-generated';
          break;

        case 'verified':
          await ctx.reply(
            `–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç: ${await this._generateInviteLink(ctx, this._config.groupId)}. –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –µ–π –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑`,
          );
          break;

        default:
          await ctx.reply('–ß–µ–ª–æ–≤–µ–∫, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é ü•≤');
      }
    }
  }

  private async _generateInviteLink(
    @Ctx() ctx: RegisteringUserContext,
    chatId: number,
    expireDate?: number,
  ): Promise<string> {
    try {
      console.log(`Generating link`);
      const inviteLink = await ctx.telegram.createChatInviteLink(chatId, {
        expire_date: expireDate,
        // expire_date: Math.floor(Date.now() / 1000) + 1800, // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –º–∏–Ω—É—Ç
        member_limit: 1, // –õ–∏–º–∏—Ç: 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      });
      return inviteLink.invite_link;
    } catch (error) {
      this._logger.error(error.message);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async _verifyUser(user: UserEntity) {
    user.isVerified = true
    await this._userService.updateUser(user)
  }

  private async _addUser(user: UserEntity): Promise<void> {
    try {
      await this._userService.createUser(user);
      console.log(`User @${user.username} added successfully!`);
    } catch (error) {
      console.error(`Failed to add user @${user.username}:`, error.message);
    }
  }

  private async _isUserChatMember(
    ctx: Context,
    chatId: string,
  ): Promise<boolean> {
    try {
      const chatMember = await ctx.telegram.getChatMember(chatId, ctx.from.id);

      return (
        chatMember.status === 'member' ||
        chatMember.status === 'administrator' ||
        chatMember.status === 'creator'
      );

    } catch (err) {
      console.log(`Seems like bot not in chat ${chatId}`)
      return
    }
  }

  private async _checkAndHandleIfChatMember(
    ctx: Context,
    chatId: string,
  ): Promise<boolean> {
    const isChatMember = await this._isUserChatMember(ctx, chatId);
    if (isChatMember) {
      await ctx.reply(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—à–µ–ª —Ç–µ–±—è, —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —á–∞—Ç–µ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –ò–¢–ú–û!',
        Markup.keyboard([[]]),
      );
    }
    return isChatMember;
  }
}
